[
{
	"uri": "https://docs.siridb.net/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction General information about SiriDB.\n"
},
{
	"uri": "https://docs.siridb.net/introduction/getting_started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "  For information on how to install SiriDB, please visit the SiriDB Server github page.\n  For information on how to create a new database or expand an existing database, please visit the SiriDB Admin github page.\n  Other SiriDB projects:\n SiriDB Prompt is a terminal based SiriDB client with auto-completion support. SiriDB HTTP provides an optional web interface and HTTP API for SiriDB. SiriDB Connector C (libsiridb) is a native SiriDB connector for the C language. SiriDB Connector Twisted is a native SiriDB connector for Python2 (using twisted). SiriDB Connector Python is a native SiriDB connector for Python3. SiriDB Connector Go is a native SiriDB connector for the Go language. SiriDB Node.js addon is a native SiriDB connector for Node.js.  "
},
{
	"uri": "https://docs.siridb.net/query-data/",
	"title": "Query data",
	"tags": [],
	"description": "",
	"content": "Query data Everything that has to do with querying data within SiriDB.\n"
},
{
	"uri": "https://docs.siridb.net/query-data/select/",
	"title": "select",
	"tags": [],
	"description": "",
	"content": "Syntax:\nselect \u0026lt;points/functions\u0026gt; from \u0026lt;match_series [\u0026lt;where\u0026gt;]\u0026gt; [\u0026lt;time_range\u0026gt;] [\u0026lt;merge_data\u0026gt;]  Example:\n# Select points from \u0026quot;series-001\u0026quot; select * from \u0026quot;series-001\u0026quot;  functions It\u0026rsquo;s possible to select multiple aggregate functions in one query. This has some advantages over performing multiple queries since the database in this case only needs to search for the series and points once. To find the requested aggregate in the result we must add a prefix and/or suffix to the series name to make the name unique. Note that a prefix and/or suffix is only required when querying multiple aggregates.\nExample:\n# Select both the min and max grouped by 5 minutes from \u0026quot;series-001\u0026quot; select min(5m) prefix \u0026quot;min-\u0026quot;, max (5m) prefix \u0026quot;max-\u0026quot; from \u0026quot;series-001\u0026quot;  For more help on aggregate functions see aggregate functions.\nCombine functions The aggregate functions can be used together by parsing the result of one function to the next. It\u0026rsquo;s also possible to use the same function twice which can be useful with for example difference.\nExample:\n# Select the median grouped by 1 minute and return the difference for that result select median (1m) =\u0026gt; difference () from \u0026quot;series-001\u0026quot;  match_series See list series on how to match series.\ntime_range An optional time range can be given to select only a part of the series data. If no time range is provided SiriDB returns all the data available. As a time range we can use before, after or between .. and ..\nWhen using after you basically set a start time, with before a end time and when using between .. and .. you set both a start and end time. Points having the exact the start time are included in the result, points with the exact end time are excluded from the result.\n Note\nIt\u0026rsquo;s safe to use now multiple times in query. SiriDB only calculates now one time while processing a query. This way you can be sure that now has the same value.\n Examples:\n# Select all points from \u0026quot;series-001\u0026quot; in the last 24h select * from \u0026quot;series-001\u0026quot; after now - 1d # Select all points from \u0026quot;series-001\u0026quot; today select * from \u0026quot;series-001\u0026quot; between now - (now % 1d) and now - (now % 1d) + 1d # Select all points from \u0026quot;series-001\u0026quot; before November, 2015 select * from \u0026quot;series-001\u0026quot; before \u0026quot;2015-11\u0026quot;  merge_data When selecting points from multiple series you can merge the data together in result. Most of the time you also want to provide an aggregate function with the merge so series get really merged into one series. Even with merge it\u0026rsquo;s still possible to use aggregate functions on the series before they are merged.\n Note\nSometimes it does not matter for the end result if you use an aggregate function on the series or only while merging. However, if you have multiple pools it can be an advantage to aggregate the series and the merge. This is an advantage because each pool can do some aggregate work and only send the aggregated result to the server processing the query.\nFor example:\nselect * from /series.*/ merge as \u0026quot;series\u0026quot; using sum(1h)\nwill have the exact same result as\nselect sum(1h) from /series.*/ merge as \u0026quot;series\u0026quot; using sum(1h)\nbut the last one will be faster, assuming you are using a SiriDB cluster and /series.*/ contains multiple series spread out over multiple pools.\n Examples:\n Note\nIn the examples below we assume there are no points in the future. If you have points in the future and only want points from 7 days ago up till now you can use between now - 7d and now. Since we assume our series have no points in the future we use after now - 7d.\n # We want the average value per 1 hour over the last 7 days over s01 # and s02. The series should weight equal to each other but s01 has # a point each 2 seconds while s02 only has a point each 5 seconds. # We solve this by first getting the mean value for each series # by 1 hour before merging the series. # # Note that we use mean(1) while merging. This means we group by 1 second or # millisecond depending on the time precision. We can do this because the # series are already grouped by 1h and therefore have re-indexed timestamps # at precisely each hour. select mean(1h) from \u0026quot;s01\u0026quot;, \u0026quot;s02\u0026quot; after now - 7d merge as \u0026quot;merged_s\u0026quot; using mean(1) # We want the number of points s01 and s02 have over the last 7 days. # Note: when having no timestamps after now this will result in one # value with timestamp *now* select count(now) from \u0026quot;s01\u0026quot;, \u0026quot;s02\u0026quot; after now - 7d merge as \u0026quot;merged_s\u0026quot; using sum(1) # We have s01 and s02 representing counter data. We want to sum the # values per 4 hours over January, 2015 and show this as one series. select sum(4h) from \u0026quot;s01\u0026quot;, \u0026quot;s01\u0026quot; between \u0026quot;2015-01\u0026quot; and \u0026quot;2015-02\u0026quot; merge as \u0026quot;merged_s\u0026quot; using sum(1)  "
},
{
	"uri": "https://docs.siridb.net/series/",
	"title": "Series",
	"tags": [],
	"description": "",
	"content": "Series Everything about Series is discussed here.\nSeries or time series can be seen as lists of data points. These time series in SiriDB are uniquely identified by name and can have any number of points. A single point consists of a timestamp and value. SiriDB supports time series for numeric data types (integer or float). Time series can be queried by name, regular expressions or dynamic groups.\n"
},
{
	"uri": "https://docs.siridb.net/query-data/aggregate_functions/",
	"title": "aggregate functions",
	"tags": [],
	"description": "",
	"content": "SiriDB supports multiple build-in aggregation and filter functions. Using these functions can be useful to reduce network traffic. Note that multiple functions can be combined using the arrow =\u0026gt; sign. (see select for more information on how to use and combine functions)\nMost aggregation function accept an optional ts argument. When not providing the ts argument, SiriDB will usually return the last timestamp in the result. One exception is the first() function which will return the first timestamp instead.\nFor example:\n# Select the last time-stamp and the average over all values. select mean() from `my_series` # Select the first time-stamp and first value: select first() from `my_series`  List of supported aggregation and filter functions:\nlimit Syntax:\nlimit(max_points, aggr_function)  Returns at most max_points and uses a given aggregation function to reduce the number of points if needed.\nExample:\n# Returns at most 100 points for 'my-series'. The original values are # returned in case hundred or less points are found. In case more points # are found a mean aggregation function is used. select limit(100, mean) from \u0026quot;my-series\u0026quot;  count Syntax:\ncount([ts])  Returns an integer value.\nCount can be used to calculate points over a period of time.\nExample:\n# Get the number of points in 'series-001' over the past 24 hours. select count(now) from \u0026quot;series-001\u0026quot; between now - 1d and now  sum Syntax:\nsum([ts])  Returns an integer or float value depending on the series data type.\nSum can be used when you want to know the sum of the values over a period of time.\nExample:\n# Get the sum of the values collected over the last 24 hours per hour. select sum(1h) from \u0026quot;series-001\u0026quot; between now - 1d and now  max Syntax:\nmax([ts])  Returns an integer or float value depending on the series data type.\nMax can be used to identify the highest value in the selected time window.\nExample:\n# Get the maximum value in 'series-001' over the last week. select max(now) from \u0026quot;series-001\u0026quot; between now - 1w and now  min Syntax:\nmin([ts])  Returns an integer or float value depending on the series data type.\nMin is the opposite of max, you identify the lowest value in the selected time window.\nExample:\n# Get the minimum value per day from 'series-001' between two dates. select min(1d) from \u0026quot;series-001\u0026quot; between '2016-11-14' and '2016-11-21'  mean Syntax:\nmean([ts])  Returns a float value.\nMean is used to calculate the average values per selected time window.\nExample:\n# Get average value of 'series-001' up until now. select mean(now) from \u0026quot;series-001\u0026quot; before now  median Syntax:\nmedian([ts])  Returns a float value.\nThe median is a robust measure of central location, and is less affected by the presence of outliers in your data. When the number of data points is odd, the middle data point is returned as float value. When the number of data points is even, the median is interpolated by taking the average of the two middle values.\nmedian_high Syntax:\nmedian_high([ts])  Returns an integer or float value depending on the series data type.\nThe high median is always a member of the data set. When the number of data points is odd, the middle value is returned. When it is even, the larger of the two middle values is returned.\nmedian_low Syntax:\nmedian_low([ts])  Returns an integer or float value depending on the series data type.\nThe low median is always a member of the data set. When the number of data points is odd, the middle value is returned. When it is even, the smaller of the two middle values is returned.\nvariance Syntax:\nvariance([ts])  Returns a float value.\nReturns the sample variance of data, an iterable of at least two real-valued numbers. Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.\npvariance Syntax:\npvariance([ts])  Returns a float value.\nReturns the population variance of data, a non-empty iterable of real-valued numbers. Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.\nstddev Syntax:\nstddev([ts])  Returns a float value.\nReturns the standard deviation which is the square root of its variance.\ndifference Syntax:\ndifference([ts])  Returns an integer or float value depending on the series data type.\nDifference without arguments is used to get the difference between values. As an optional argument you can specify a time period. In this case the function returns the difference between the first value and the last value within the time window.\nExample:\n# Select difference between values in series-001. select difference() from 'series-001'  derivative Syntax:\nderivative([ts [, ts]])  Returns a float value.\nThe derivative can be used to get the difference per time unit. When no optional arguments are used we return the difference per one unit. For example, in a database with second precision the return value will be the difference per second. Optionally another time unit can be used. A second argument can be used to set a time period. This time period will be used to get the difference between the first and last value within the time window.\nExample:\n# Select the difference per second for values in series-001. select derivative(1s) from 'series-001' # Select the difference per second between the first and last value # within each hour for values in 'series-001' select derivative(1s, 1h) from 'series-001'  filter Syntax:\nfilter(\u0026lt;operator\u0026gt; \u0026lt;value\u0026gt;)  Returns an integer, float or string value depending on the series data type.\nFilter is used to filter the result by values.\nExample:\n# Select all values from 'series-001' except where the value is 0 select filter(!= 0) from 'series-001' # Select all positive values from 'series-001' select filter(\u0026gt; 0) from 'series-001' # Select all values containing 'error' and not 'unavailable select filter(~'error') =\u0026gt; filter(!~'unavailable') from 'some-log-series' # Select all values starting with 'error' using a regular expression select filter(/error.*/) from 'some-log-series' # Filter out Not-a-number (nan) and Infinite values select filter(!=nan) =\u0026gt; filter(!=inf) =\u0026gt; filter(!=-inf) from 'some-float-series'  first Syntax:\nfirst([ts])  Returns the first value in each ts time window. (Or just the first value)\nExample:\n# Select the first value from 'series-001' select first() from 'series-001' # Select the first value per day from 'series-001' select first(1d) from 'series-001' # Select the first value in 2018 from 'series-001' select first() from 'series-001' after '2018'  last Syntax:\nlast([ts])  Returns the last value in each ts time window. (Or just the last value)\nExample:\n# Select the last value from 'series-001' select last() from 'series-001' # Select the last value per day from 'series-001' select last(1d) from 'series-001' # Select the last value in 2017 from 'series-001' select last() from 'series-001' before '2018' "
},
{
	"uri": "https://docs.siridb.net/shards/",
	"title": "Shards",
	"tags": [],
	"description": "",
	"content": "Shards Everything about Shards is discussed here.\nShards are files for specific time-ranges within a time series. A shard can, for example, contain all data of a certain year / month / day / etc. On the initial setup of a SiriDB database the shard duration must be chosen.\n"
},
{
	"uri": "https://docs.siridb.net/query-data/debug/",
	"title": "debug (timeit)",
	"tags": [],
	"description": "",
	"content": "Can be placed in front of any query and will return information about the time it took to process the query.\nSyntax:\ntimeit \u0026lt;any_query\u0026gt;  Example result:\n{ \u0026quot;__timeit__\u0026quot;: [ { \u0026quot;time\u0026quot;: 0.001156334212755393, \u0026quot;server\u0026quot;: \u0026quot;server04.siridb.net:9010\u0026quot; }, { \u0026quot;time\u0026quot;: 0.001481771469116211, \u0026quot;server\u0026quot;: \u0026quot;server01.siridb.net:9010\u0026quot; } ] }  Here __timeit__ is an array containing response data from each server involved in processing the query. The last server in this list is the server who has received the query. Since this server is responsible for sending the response it has to wait for all other servers to complete and therefore the query time for this server will always be the highest value of all servers in the list.\n"
},
{
	"uri": "https://docs.siridb.net/groups/",
	"title": "Groups",
	"tags": [],
	"description": "",
	"content": "Groups Everything about Groups is discussed here.\nGroups are selections of a number of series that meet a certain regular expression.\n"
},
{
	"uri": "https://docs.siridb.net/series/list_series/",
	"title": "list series",
	"tags": [],
	"description": "",
	"content": "Syntax:\nlist series [columns] [match_series] [where ...] [limit ...]  columns Valid columns are:\n name: Series name pool: Pool where the series is assigned to start: Time-stamp of the first value in the series end: Time-stamp of the last value in the series length: The number of points in a series type: The series type. (\u0026ldquo;integer\u0026rdquo; or \u0026ldquo;float\u0026rdquo;)  When no columns are provided the default is used. (name)\nmatch series Series can be matched using different methods. Groups can help to quickly get the required series even in a database with millions of unique series.\nSyntax:\n\u0026lt;series_name | regular_expression | group\u0026gt; [update_function \u0026lt;match_series\u0026gt;]  series name A series name is a string containing the series name. An error is raised when the given series name is not found in SiriDB. (Note that this exception is not raised when the database is re-indexing. In case of re-indexing we just don\u0026rsquo;t return the series like a search using regular expression)\nAn advantage of using series names in a SiriDB cluster is that we know in which pool the series exists. The given query will therefore only be send to the applicable pool(s). We don\u0026rsquo;t know which pool has series when using a regular expression or group match so each pool then needs the query.\nExample:\nlist series 'series-001'  regular expression Regular expressions can be used to select series. Note that each pool in a SiriDB cluster will look for matching series. If you plan to use a regular expression multiple times, you should consider creating a group for the expression.\nExample:\n# list all series starting with \u0026quot;linux\u0026quot; list series /linux.*/ # list all series starting with \u0026quot;linux\u0026quot; (case-insensitive) list series /linux.*/i # list all series not starting with \u0026quot;linux\u0026quot; list series /(?!linux).*/ # list all series not containing \u0026quot;linux\u0026quot; list series /((?!linux).)*/  group Groups are basically cached regular expression and can be used together with normal regular expressions. When you use a regular expression to match series in a group it\u0026rsquo;s best to first select the group and then the regular expression. This way the regular expression only needs to validate series inside the group.\nExamples:\n# list all series in group \u0026quot;linux\u0026quot; list series `linux` # list all series in group \u0026quot;linux\u0026quot; with \u0026quot;cpu\u0026quot; in the name # note that we first select the group so the regular expression only # needs to be validated on series in the group. list series `linux` \u0026amp; /.*cpu.*/  update functions When selecting series you can combine series-names, regular-expressions and groups. Update functions tell SiriDB how to combine selection. SiriDB knows four update functions:\n difference (alias: -) symmentric_difference (alias: ^) union (aliases: , and |) intersection (alias: \u0026amp;)  examples # list multiple series using union (we actually use the alias here) list series 'series-001', 'series-002', 'series-003' # list series in group \u0026quot;linux\u0026quot; except series which are also in group \u0026quot;cpu\u0026quot; list series `linux` - `cpu` # list series when member of group \u0026quot;linux\u0026quot; or group \u0026quot;cpu\u0026quot; but not both list series `linux` ^ `cpu` # list series that are both members of `linux` and `cpu` except when # a series name contains \u0026quot;test\u0026quot;. list series `linux` \u0026amp; `cpu` - /.*test.*/ # list series in group `linux` and view their length. list series name, length `linux` # list series in group `linux` which have their last data point more # than 100 days ago list series `linux` where end \u0026lt; now - 100d # sample output (list series) { \u0026quot;columns\u0026quot;: [\u0026quot;name\u0026quot;], \u0026quot;series\u0026quot;: [ [\u0026quot;series-001\u0026quot;], [\u0026quot;series-002\u0026quot;] ] }  "
},
{
	"uri": "https://docs.siridb.net/servers/",
	"title": "Servers",
	"tags": [],
	"description": "",
	"content": "Servers Everything that has to do with server management within SiriDB.\n"
},
{
	"uri": "https://docs.siridb.net/series/count_series/",
	"title": "count series",
	"tags": [],
	"description": "",
	"content": "Syntax:\ncount series [length] [match_series] [where ...]  Count series in the SiriDB cluster. For more information about how to select series see list series.\nCount series length gives the total number of points for the selected series.\nExamples:\n# Get number of series count series # Get the total number of points in the database count series length # Get number of series in group `group_server01` count series `group_server01` # Get number of points for series in pool 0 count series length where pool == 0 # Get the number of series which started in the last week count series where start \u0026gt; now - 1w and start \u0026lt;= now  Example output (series):\n{\u0026quot;series\u0026quot;: 1105946}  Example output (series length):\n{\u0026quot;series_length\u0026quot;: 77450345251} "
},
{
	"uri": "https://docs.siridb.net/series/drop_series/",
	"title": "drop series",
	"tags": [],
	"description": "",
	"content": "Syntax:\ndrop series [series_match] [where ...] [set ignore_threshold true/false]  Drops series from SiriDB. Optionally you can use a match and/or where statement to filter the series you want to drop. For more information about how to match series look at list series.\nSiriDB has a mechanism to protect you from accidentally dropping all (or many) series. This is done with a threshold value. If the server receiving your drop request finds more series to drop than the threshold, the request is denied and you receive an error_msg about trying to delete more series than the threshold value. The drop_threshold value will not be checked by other servers in the cluster. You can view the current drop_threshold with show drop_threshold or look up alter database for how to change this value. If you want to ignore the drop_threshold for one request you can add set ignore_threshold true. The default drop threshold is set to 1 (100%) which means you cannot drop all series but any other amount will pass. Any value between 0 and 1 will work. For example a value of 0.5 means you cannot drop more than 50% of the available series.\n Warning\nBefore dropping series using a regular expression you should check the expression using count series and/or list series and see if your match has the expected result.\n Examples:\n# Drop series \u0026quot;series-001\u0026quot; drop series \u0026quot;series-001\u0026quot; # Drop all series drop series set ignore_threshold true  "
},
{
	"uri": "https://docs.siridb.net/users/",
	"title": "Users",
	"tags": [],
	"description": "",
	"content": "Users Everything that has to do with user management within SiriDB.\n"
},
{
	"uri": "https://docs.siridb.net/shards/list_shards/",
	"title": "list shards",
	"tags": [],
	"description": "",
	"content": "Syntax:\nlist shards [columns] [where ...] [limit ...]  columns Valid columns are:\n start: Start timestamp for the shard end: End timestamp for the shard sid: Shard identifier (the same sid usually exist on multiple servers). server: Server name on which the shard exists. pool: Pool where the shard in exists. status: Status flags for the shard. type: Type of the shard (number or log). size: Size of the shard. This is the total shard size over all pools. When a pool has more servers (replicas) the displayed size can vary when running this query multiple times because servers are responsible for optimizing their own shards and this could result in different shard sizes.  When no columns are provided the default is used. (sid, pool, server, start, end)\nExample:\n# List all shards list shards # List shards used for data older then 100 days list shards where start \u0026lt; now - 100d # sample output (list shards) { \u0026quot;columns\u0026quot;: [\u0026quot;sid\u0026quot;, \u0026quot;pool\u0026quot;, \u0026quot;server\u0026quot;, \u0026quot;start\u0026quot;, \u0026quot;end\u0026quot; ], \u0026quot;shards\u0026quot;: [ [1449705600, 0, \u0026quot;srv01:9010\u0026quot;, 1449705600, 1450310400], [1449705601, 0, \u0026quot;srv01:9010\u0026quot;, 1449705600, 1450310400], ... ] }  "
},
{
	"uri": "https://docs.siridb.net/database/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": "Database Everything that has to do with database configuration within SiriDB.\n"
},
{
	"uri": "https://docs.siridb.net/shards/count_shards/",
	"title": "count shards",
	"tags": [],
	"description": "",
	"content": "Syntax:\ncount shards [size] [where ...]  Count shards returns the number of shards on all online servers in a SiriDB cluster. This means that offline servers are ignored and replica servers are included in the query. It\u0026rsquo;s also possible to count the shards size in case you want to see the amount of disk-space shards are using.\nExample:\n# Get number of shards count shards # Get number of shards for the current points. (assuming you have # no shards for points in the future) count shards where end \u0026gt; now # Get the amount of disk space (in bytes) which shards are using # on server01. count shards size where server == 'server01'  Example output (count shards):\n{\u0026quot;shards\u0026quot;: 51}  Example output (count shards size):\n{\u0026quot;shards_size\u0026quot;: 355243846}  "
},
{
	"uri": "https://docs.siridb.net/shards/drop_shards/",
	"title": "drop shards",
	"tags": [],
	"description": "",
	"content": "Syntax:\ndrop shards [where ...] [set ignore_threshold true/false]  Drops an existing shard using the shard id (sid). Use list shards for an overview of the current shards. This statement requires all pools to have at least one online server. The number of dropped shard in the result message only contains the dropped shards by one member of a pool, not the shards which are dropped by a replica. This is different from the count shards statement which includes shards on replica servers as well.\n Note\nThis statement is protected with a threshold. See drop series and alter database for more information about this threshold value.\n Example:\n# Drop shards for points which are older than one year drop shards where end \u0026lt; now - 52w  "
},
{
	"uri": "https://docs.siridb.net/groups/create_group/",
	"title": "create group",
	"tags": [],
	"description": "",
	"content": "Syntax:\ncreate group `groupname` for /regular_expression/  Groups should be between backticks to make them different from strings. Since a group is basically a cached regular expression we need to provide the regular expression we want to use for the group.\nIf you want to drop an existing group see drop groups.\nExample:\n# Create a group linux create group `linux` for /linux.*/  "
},
{
	"uri": "https://docs.siridb.net/groups/count_groups/",
	"title": "count groups",
	"tags": [],
	"description": "",
	"content": "Syntax:\ncount groups [where ...]  Count groups returns the number of groups defined in the database.\nExample:\n# Get number of groups count groups # Get number of groups with more than 100 series count groups where series \u0026gt; 100  Example output:\n{\u0026quot;groups\u0026quot;: 23} "
},
{
	"uri": "https://docs.siridb.net/groups/list_groups/",
	"title": "list groups",
	"tags": [],
	"description": "",
	"content": "Syntax:\nlist groups [columns] [where ...] [limit ...]  columns Valid columns are:\n name: Group name series: Number of series in the group. expression: Show the expression used for this group.  When no columns are provided the default is used. (name)\nExamples:\n# View all groups list groups # View groups and the expression used list groups name, expression # sample output (list groups) { \u0026quot;columns\u0026quot;: [\u0026quot;name\u0026quot;], \u0026quot;groups\u0026quot;: [ [\u0026quot;linux\u0026quot;], [\u0026quot;windows\u0026quot;] ] }  "
},
{
	"uri": "https://docs.siridb.net/groups/alter_group/",
	"title": "alter group",
	"tags": [],
	"description": "",
	"content": "Syntax:\nalter group `groupname` set \u0026lt;option\u0026gt;  Valid options are expression and name.\nset expression Change the regular expression for a group.\nExample:\n# Create group `linux` create group `linux` for /linux.*/ # Change expression so we will match case insensitive alter group `linux` set expression /linux.*/i  set name Change the name for a group.\n Note\nThis statement expects a normal string using single or double quotes. The reason is that \u0026lsquo;set name\u0026rsquo; expects a string and not a group.\n Example:\n# Rename group `linux` to `ubuntu` alter group `linux` set name 'ubuntu'  "
},
{
	"uri": "https://docs.siridb.net/groups/drop_groups/",
	"title": "drop groups",
	"tags": [],
	"description": "",
	"content": "Syntax:\ndrop group `groupname`  Drops an existing group.\nExample:\n# Drop group `linux` drop group `linux` "
},
{
	"uri": "https://docs.siridb.net/servers/alter_server/",
	"title": "alter server",
	"tags": [],
	"description": "",
	"content": "Syntax:\nalter server \u0026lt;server_uuid / server_name\u0026gt; set \u0026lt;option\u0026gt;  Valid options are address, port, backup_mode and log_level. We can use both, a servers name or uuid to change a server. To view the current servers names and uuids use the command: list servers name, uuid\nset address/port Usually its not required to change the servers address or port using this command but instead you should change the address/port in the configuration file (default /etc/siridb/siridb.conf). When the server gets online it will contact all SiriDB servers and they will automatically update to the new address/port in their local database. However, if all servers in a cluster are updated at once, we need to tell at least one SiriDB server where to find the other server(s). This should be the only situation when this command is required.\nExample:\n# srv1 and srv2 both have changed to another address so # they are not able find each other. The command below # is executed on srv1 and tells where to find srv2. alter server 'srv2.old.domain:9010' set address 'srv2.new.domain' # After executing the above command, srv1 will connect to srv2 # using the new domain name and announces its own new address so # srv2 will update the address automatically and will connect # to srv1 again.  backup_mode When a backup_mode is enabled on a SiriDB server, all files in the database directory will be closed (both dbpath and buffer_path). This way you can make a backup of SiriDB without having problems with open files.\nlog_level With the argument \u0026ndash;log-level it\u0026rsquo;s possible to start with a certain log level. The default log level is info. If you want the log level to change while being online, this command can be used. It will not be saved when the server is restarted.\nValid loglevels are \u0026ldquo;debug\u0026rdquo;, \u0026ldquo;info\u0026rdquo;, \u0026ldquo;warning\u0026rdquo;, \u0026ldquo;error\u0026rdquo; and \u0026ldquo;critical\u0026rdquo;\nExample:\n# Change the log-level to \u0026quot;debug\u0026quot; alter server f851c6a4-820e-11e5-9661-080027f37001 set log_level debug  "
},
{
	"uri": "https://docs.siridb.net/servers/alter_servers/",
	"title": "alter servers",
	"tags": [],
	"description": "",
	"content": "Syntax:\nalter servers [where...] set log_level \u0026lt;option\u0026gt;  Valid options are debug, info, warning, error and critical.\nThis command will change the log level for n servers at once. Changing the log level is explained in more detail at alter server.\n"
},
{
	"uri": "https://docs.siridb.net/servers/count_servers/",
	"title": "count servers",
	"tags": [],
	"description": "",
	"content": "Syntax:\ncount servers [received_points/selected_points] [where ...]  Count servers returns the number of servers in a SiriDB cluster. Received points are the number of points received by a server since uptime. After a restart the received points counters are reset to zero.\n Info\nReceived points only shows the number of points after uptime. For the total number of points you can use count series length\n Examples:\n# Get number of servers count servers # Get number of servers in pool 0 count servers where pool == 0 # Get total received points since uptime count servers received_points # Get total number of selected (queried) points since uptime count servers selected_points  Example output (count servers):\n{\u0026quot;servers\u0026quot;: 6}  Example output (count servers received_points):\n{\u0026quot;count\u0026quot;: 21573435683}  "
},
{
	"uri": "https://docs.siridb.net/servers/list_servers/",
	"title": "list servers",
	"tags": [],
	"description": "",
	"content": "Syntax:\nlist servers [columns] [where ...] [limit ...]  List servers in a SiriDB Cluster. This command can be useful to view status information about a server.\ncolumns Valid columns are:\n active_handles: Returns the active handles which can be used as an indicator on how busy a server is. active_tasks: Returns the active tasks for the current database. address: Server address. buffer_path: Path where this server keeps the buffer file. buffer_size: Size the server uses for one series in the buffer. dbpath: Path where the server stores the database. fifo_files: Number of fifo files which are used to update the replica server. This value is 0 if the server has no replica. A value greater than 1 could be an indication that replication is not working. idle_percentage: Returns percentage of idle time since the database was loaded. idle_time: Returns the idle time in seconds since the database was loaded. ip_support: IP Support setting on the server. (ALL/ IPV4ONLY/ IPV6ONLY) libuv: Version of libuv library. log_level: Current loglevel for the server. max_open_files: Returns the maximum open files value used for sharding on this server. (If this value is lower than expected, please check the log files for SiriDB as startup time) mem_usage: Shows memory usage for the server in MB\u0026rsquo;s. name: Server name. online: True when the server is online. open_files: Number of open files for this database on the server. pool: Returns the pool ID for the server. port: Server port. received_points: Returns the number of received points by the server. On each restart of the SiriDB Server the counter will reset to 0. This value is only incremented when the server is receiving points from a client. reindex_progress: Returns the re-index status. Only available when the database is re-indexing series over pools. selected_points: Returns the selected points on the server. On each restart of the SiriDB Server the counter will reset to 0. This value includes all points which are read from the local shards and the points received from other servers to respond to a select query. The value is only incremented when the server received the select query from a client. startup_time: Time it takes to start the server. status: Current server status. sync_progress: Return synchronization status while creating a new replica server. uptime: Uptime in seconds. uuid: Server UUID (unique ID) version: SiriDB version  When no columns are provided the default is used. (name, pool, version, online, status)\nexamples # list all servers in a SiriDB cluster. list servers # list all offline servers list servers where online == false # view memory usage and open files on all servers. list servers name, mem_usage, open_files # sample output (list servers) { \u0026quot;columns\u0026quot;: [\u0026quot;name\u0026quot;, \u0026quot;pool\u0026quot;, \u0026quot;version\u0026quot;, \u0026quot;online\u0026quot;, \u0026quot;status\u0026quot;], \u0026quot;servers\u0026quot;: [ [\u0026quot;siri1:9010\u0026quot;, 0, \u0026quot;2.0.10\u0026quot;, true, \u0026quot;running\u0026quot;], [\u0026quot;siri2:9010\u0026quot;, 1, \u0026quot;2.0.10\u0026quot;, true, \u0026quot;running\u0026quot;] ] }  "
},
{
	"uri": "https://docs.siridb.net/servers/drop_server/",
	"title": "drop server",
	"tags": [],
	"description": "",
	"content": "Syntax:\ndrop server \u0026lt;server_uuid / server_name\u0026gt;  Can be used to remove a server. We only allow dropping a server which has a replica since scaling down in number of pools is currently not supported. A server needs to be turned off before it can be dropped.\n Note\nWhen having two servers in a pool, let\u0026rsquo;s call them siri1 and siri2 and for some reason siri2 is broken and does not start. You might be in a situation where siri1 is waiting for siri2 to connect and start to synchronize data. Both servers are not working in this case but when dropping siri2, siri1 removes the \u0026lsquo;wait for synchronization\u0026rsquo; status and starts accepting inserts and queries.\n Example:\n# Drop server 'siri2:9010'. We first need to turn off # this server and make sure the server has a replica. drop server 'siri2:9010'  "
},
{
	"uri": "https://docs.siridb.net/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": "Access Everything that has to do has access rights within SiriDB.\n"
},
{
	"uri": "https://docs.siridb.net/access/access_rights/",
	"title": "access rights",
	"tags": [],
	"description": "",
	"content": "SiriDB knows the following access rights:\n select show list count create insert drop alter grant revoke  The most obvious ones are combined into access profiles which can be used to grant or revoke multiple access rights at once.\n read: (select, show, list and count) write: read + (create and insert) modify: write + (drop and alter) full: modify + (grant, revoke)   Warning\nChanges to access rights are active immediately, so be careful when revoking access rights from users.\n "
},
{
	"uri": "https://docs.siridb.net/access/grant_access/",
	"title": "grant access",
	"tags": [],
	"description": "",
	"content": "Syntax:\ngrant \u0026lt;access\u0026gt; to user 'username'  Grants access rights to a user. For information about access rights see access rights.\nExample:\n# Grant drop and create to user \u0026quot;iris\u0026quot; grant drop, create to user \u0026quot;iris\u0026quot;  Output:\n{\u0026quot;success_msg\u0026quot;: \u0026quot;Successfully granted permissions to user ...\u0026quot;}  "
},
{
	"uri": "https://docs.siridb.net/access/revoke_access/",
	"title": "revoke access",
	"tags": [],
	"description": "",
	"content": "Syntax:\nrevoke \u0026lt;access\u0026gt; from 'username'  Revokes access rights from a user. For information about access rights see access rights.\n Warning\nIf accidentally all access rights for all users are gone, you need to recover the default user. See no access for how to recover from a situation not having access to SiriDB.\n Example:\n# Revoke drop and create from user \u0026quot;iris\u0026quot; revoke drop, create from user \u0026quot;iris\u0026quot;  Output:\n{\u0026quot;success_msg\u0026quot;: \u0026quot;Successfully revoked permissions from ...\u0026quot;} "
},
{
	"uri": "https://docs.siridb.net/access/restore_access/",
	"title": "restore access",
	"tags": [],
	"description": "",
	"content": "Read/use this section when accidentally all access rights to a database are gone. Follow the steps below to recover the default user. (username: iris, password: siri)\nStop all servers in the SiriDB cluster.\n# Assume you use systemd to start SiriDB... \u0026gt; sudo systemctl stop siridb-server.service   Warning\nIt\u0026rsquo;s really important to stop all servers in a SiriDB cluster to prevent database inconsistency.\n Remove the appropriate file on all servers in the SiriDB cluster.\n# Restore the default user \u0026gt; rm my_database_folder/users.dat  Start all servers in the SiriDB cluster.\n# Assume systemd is used to start SiriDB... \u0026gt; sudo systemctl start siridb-server.service  "
},
{
	"uri": "https://docs.siridb.net/access/no_access/",
	"title": "no access",
	"tags": [],
	"description": "",
	"content": "Read/use this section when accidentally all access rights to a database are gone. Follow the steps below to recover the default user. (username: iris, password: siri)\nStop all servers in the SiriDB cluster.\n# Assume you use systemd to start SiriDB... \u0026gt; sudo systemctl stop siridb-server.service   Warning\nIt\u0026rsquo;s really important to stop all servers in a SiriDB cluster to prevent database inconsistency.\n Remove the appropriate file on all servers in the SiriDB cluster.\n# Restore the default user \u0026gt; rm my_database_folder/users.dat  Start all servers in the SiriDB cluster.\n# Assume systemd is used to start SiriDB... \u0026gt; sudo systemctl start siridb-server.service "
},
{
	"uri": "https://docs.siridb.net/users/create_user/",
	"title": "create user",
	"tags": [],
	"description": "",
	"content": "Syntax:\ncreate user 'my-username' set password 'my-password'  Create a new user. This will create a new user without access to SiriDB. For more information on how to grant access to a user see grant access.\nExample:\n# This will create a new user 'iris' with password 'siri' create user 'iris' set password 'siri' # Grant \u0026quot;read\u0026quot; access to \u0026quot;iris\u0026quot; grant read to user \u0026quot;iris\u0026quot;  "
},
{
	"uri": "https://docs.siridb.net/users/count_users/",
	"title": "count users",
	"tags": [],
	"description": "",
	"content": "Syntax:\ncount users [where ...]  Count users returns the number of users.\nExamples:\n# Get number of users count users # Get number of users not equal to 'iris' count users where name != 'iris'  Example output:\n{\u0026quot;users\u0026quot;: 6}  "
},
{
	"uri": "https://docs.siridb.net/users/list_users/",
	"title": "list users",
	"tags": [],
	"description": "",
	"content": "Syntax:\nlist users [columns] [where ...] [limit ...]  columns Valid columns are:\n name: User name. access: Access rights assigned to the user.  When no columns are provided the default is used. (name, access)\nExample:\n# List all users list users # List users with full access list users where access == full  "
},
{
	"uri": "https://docs.siridb.net/users/alter_user/",
	"title": "alter user",
	"tags": [],
	"description": "",
	"content": "Syntax:\nalter user 'username' set \u0026lt;option\u0026gt;  Valid options are password and name.\nChange a user name or password.\nExample:\n# Change the password for \u0026quot;iris\u0026quot; to \u0026quot;siri\u0026quot; alter user 'iris' set password 'siri'  "
},
{
	"uri": "https://docs.siridb.net/database/alter_database/",
	"title": "alter database",
	"tags": [],
	"description": "",
	"content": "Syntax:\nalter database set \u0026lt;option\u0026gt;  Valid options are:\n drop_threshold expiration_log expiration_num timezone select_points_limit list_limit  drop_threshold This value is used to protect you from accidentally dropping data from SiriDB. The threshold is a value between 0 and 1 (0/100%). The threshold value is only checked against the pool receiving your query. The default threshold value is 1 (100%) but it might be a good idea to change this to a lower value.\n Note\nCurrently the drop_threshold is only used for dropping series and shards because these are the only queries where we allow to drop multiple entries at once.\n Example:\n# Do not allow dropping more than 10% series or shards at once alter database set drop_threshold 0.1 # View the current threshold show drop_threshold  expiration_log This settings should be an integer value with the time precision of the database.\nFor example:\n# Suppose we have a second precision database, # then this will drop log shards, older than 4 weeks alter database set expiration_log 3600*24*7*4 expiration_num This settings should be an integer value with the time precision of the database.\nFor example:\n# Suppose we have a second precision database, # then this will drop number shards, older than 4 weeks alter database set expiration_num 3600*24*7*4 set timezone Change the timezone for the database. When using a date/time in a query SiriDB needs to convert the given date to a timestamp. Default NAIVE is used which means SiriDB is naive about the time zone and acts as if it\u0026rsquo;s a local time.\n Warning\nWhen using a SiriDB database over multiple time zones it\u0026rsquo;s probably best to set the time zone to anything other than NAIVE since with NAIVE the server receiving the query will convert the date to a local time-stamp. This means that sending the same query to a server in another time zone could respond with a different result.\nHowever, it\u0026rsquo;s always possible in the query to specify a UTC date by adding \u0026lsquo;Z\u0026rsquo; to the date. For example: \u0026lsquo;2016-01-11 16:00Z\u0026rsquo; will use UTC as it\u0026rsquo;s time zone, no matter what time zone the database has configured.\n For a list of valid time zones see timezones.\nExample:\n# Set the default time zone to UTC alter database set timezone 'UTC' # Set the default time zone to NAIVE alter database set timezone 'NAIVE' # Set the default time zone to Europe/Amsterdam alter database set timezone 'Europe/Amsterdam'  select_points_limit Change the maximum points which can be returned by a select query. The default and recommended value is set to one million points. This value is chosen to prevent a single query for taking to much memory and ensures SiriDB can respond to almost any query in a reasonable amount of time.\nExample:\n# Increase the select points limit to 5 million alter database set select_points_limit 5000000  list_limit Change the maximum value which can be used as a limit for a list statement. The default and recommended value is set to ten thousand to prevent queries which could take a large amount of memory. The value must be greater than or equal to 1000.\nExample:\n# Set the list limit to 50 thousand. alter database set list_limit 50000  "
},
{
	"uri": "https://docs.siridb.net/database/timezones/",
	"title": "timezones",
	"tags": [],
	"description": "",
	"content": "For information on how to change the time zone see alter database.\n Note\nThere is one special time-zone, named NAIVE which is the default time-zone when creating a database. When this time-zone is used, a SiriDB server handles a given date as a local time. All other time zones can be found below.\n  Africa/Abidjan Africa/Accra Africa/Addis_Ababa Africa/Algiers Africa/Asmara Africa/Bamako Africa/Bangui Africa/Banjul Africa/Bissau Africa/Blantyre Africa/Brazzaville Africa/Bujumbura Africa/Cairo Africa/Casablanca Africa/Ceuta Africa/Conakry Africa/Dakar Africa/Dar_es_Salaam Africa/Djibouti Africa/Douala Africa/El_Aaiun Africa/Freetown Africa/Gaborone Africa/Harare Africa/Johannesburg Africa/Juba Africa/Kampala Africa/Khartoum Africa/Kigali Africa/Kinshasa Africa/Lagos Africa/Libreville Africa/Lome Africa/Luanda Africa/Lubumbashi Africa/Lusaka Africa/Malabo Africa/Maputo Africa/Maseru Africa/Mbabane Africa/Mogadishu Africa/Monrovia Africa/Nairobi Africa/Ndjamena Africa/Niamey Africa/Nouakchott Africa/Ouagadougou Africa/Porto-Novo Africa/Sao_Tome Africa/Tripoli Africa/Tunis Africa/Windhoek America/Adak America/Anchorage America/Anguilla America/Antigua America/Araguaina America/Argentina/Buenos_Aires America/Argentina/Catamarca America/Argentina/Cordoba America/Argentina/Jujuy America/Argentina/La_Rioja America/Argentina/Mendoza America/Argentina/Rio_Gallegos America/Argentina/Salta America/Argentina/San_Juan America/Argentina/San_Luis America/Argentina/Tucuman America/Argentina/Ushuaia America/Aruba America/Asuncion America/Atikokan America/Bahia America/Bahia_Banderas America/Barbados America/Belem America/Belize America/Blanc-Sablon America/Boa_Vista America/Bogota America/Boise America/Cambridge_Bay America/Campo_Grande America/Cancun America/Caracas America/Cayenne America/Cayman America/Chicago America/Chihuahua America/Costa_Rica America/Creston America/Cuiaba America/Curacao America/Danmarkshavn America/Dawson America/Dawson_Creek America/Denver America/Detroit America/Dominica America/Edmonton America/Eirunepe America/El_Salvador America/Fort_Nelson America/Fortaleza America/Glace_Bay America/Godthab America/Goose_Bay America/Grand_Turk America/Grenada America/Guadeloupe America/Guatemala America/Guayaquil America/Guyana America/Halifax America/Havana America/Hermosillo America/Indiana/Indianapolis America/Indiana/Knox America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Tell_City America/Indiana/Vevay America/Indiana/Vincennes America/Indiana/Winamac America/Inuvik America/Iqaluit America/Jamaica America/Juneau America/Kentucky/Louisville America/Kentucky/Monticello America/Kralendijk America/La_Paz America/Lima America/Los_Angeles America/Lower_Princes America/Maceio America/Managua America/Manaus America/Marigot America/Martinique America/Matamoros America/Mazatlan America/Menominee America/Merida America/Metlakatla America/Mexico_City America/Miquelon America/Moncton America/Monterrey America/Montevideo America/Montserrat America/Nassau America/New_York America/Nipigon America/Nome America/Noronha America/North_Dakota/Beulah America/North_Dakota/Center America/North_Dakota/New_Salem America/Ojinaga America/Panama America/Pangnirtung America/Paramaribo America/Phoenix America/Port-au-Prince America/Port_of_Spain America/Porto_Velho America/Puerto_Rico America/Rainy_River America/Rankin_Inlet America/Recife America/Regina America/Resolute America/Rio_Branco America/Santa_Isabel America/Santarem America/Santiago America/Santo_Domingo America/Sao_Paulo America/Scoresbysund America/Sitka America/St_Barthelemy America/St_Johns America/St_Kitts America/St_Lucia America/St_Thomas America/St_Vincent America/Swift_Current America/Tegucigalpa America/Thule America/Thunder_Bay America/Tijuana America/Toronto America/Tortola America/Vancouver America/Whitehorse America/Winnipeg America/Yakutat America/Yellowknife Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Macquarie Antarctica/Mawson Antarctica/McMurdo Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Arctic/Longyearbyen Asia/Aden Asia/Almaty Asia/Amman Asia/Anadyr Asia/Aqtau Asia/Aqtobe Asia/Ashgabat Asia/Baghdad Asia/Bahrain Asia/Baku Asia/Bangkok Asia/Beirut Asia/Bishkek Asia/Brunei Asia/Chita Asia/Choibalsan Asia/Colombo Asia/Damascus Asia/Dhaka Asia/Dili Asia/Dubai Asia/Dushanbe Asia/Gaza Asia/Hebron Asia/Ho_Chi_Minh Asia/Hong_Kong Asia/Hovd Asia/Irkutsk Asia/Jakarta Asia/Jayapura Asia/Jerusalem Asia/Kabul Asia/Kamchatka Asia/Karachi Asia/Kathmandu Asia/Khandyga Asia/Kolkata Asia/Krasnoyarsk Asia/Kuala_Lumpur Asia/Kuching Asia/Kuwait Asia/Macau Asia/Magadan Asia/Makassar Asia/Manila Asia/Muscat Asia/Nicosia Asia/Novokuznetsk Asia/Novosibirsk Asia/Omsk Asia/Oral Asia/Phnom_Penh Asia/Pontianak Asia/Pyongyang Asia/Qatar Asia/Qyzylorda Asia/Rangoon Asia/Riyadh Asia/Sakhalin Asia/Samarkand Asia/Seoul Asia/Shanghai Asia/Singapore Asia/Srednekolymsk Asia/Taipei Asia/Tashkent Asia/Tbilisi Asia/Tehran Asia/Thimphu Asia/Tokyo Asia/Ulaanbaatar Asia/Urumqi Asia/Ust-Nera Asia/Vientiane Asia/Vladivostok Asia/Yakutsk Asia/Yekaterinburg Asia/Yerevan Atlantic/Azores Atlantic/Bermuda Atlantic/Canary Atlantic/Cape_Verde Atlantic/Faroe Atlantic/Madeira Atlantic/Reykjavik Atlantic/South_Georgia Atlantic/St_Helena Atlantic/Stanley Australia/Adelaide Australia/Brisbane Australia/Broken_Hill Australia/Currie Australia/Darwin Australia/Eucla Australia/Hobart Australia/Lindeman Australia/Lord_Howe Australia/Melbourne Australia/Perth Australia/Sydney Canada/Atlantic Canada/Central Canada/Eastern Canada/Mountain Canada/Newfoundland Canada/Pacific Europe/Amsterdam Europe/Andorra Europe/Athens Europe/Belgrade Europe/Berlin Europe/Bratislava Europe/Brussels Europe/Bucharest Europe/Budapest Europe/Busingen Europe/Chisinau Europe/Copenhagen Europe/Dublin Europe/Gibraltar Europe/Guernsey Europe/Helsinki Europe/Isle_of_Man Europe/Istanbul Europe/Jersey Europe/Kaliningrad Europe/Kiev Europe/Lisbon Europe/Ljubljana Europe/London Europe/Luxembourg Europe/Madrid Europe/Malta Europe/Mariehamn Europe/Minsk Europe/Monaco Europe/Moscow Europe/Oslo Europe/Paris Europe/Podgorica Europe/Prague Europe/Riga Europe/Rome Europe/Samara Europe/San_Marino Europe/Sarajevo Europe/Simferopol Europe/Skopje Europe/Sofia Europe/Stockholm Europe/Tallinn Europe/Tirane Europe/Uzhgorod Europe/Vaduz Europe/Vatican Europe/Vienna Europe/Vilnius Europe/Volgograd Europe/Warsaw Europe/Zagreb Europe/Zaporozhye Europe/Zurich GMT Indian/Antananarivo Indian/Chagos Indian/Christmas Indian/Cocos Indian/Comoro Indian/Kerguelen Indian/Mahe Indian/Maldives Indian/Mauritius Indian/Mayotte Indian/Reunion Pacific/Apia Pacific/Auckland Pacific/Bougainville Pacific/Chatham Pacific/Chuuk Pacific/Easter Pacific/Efate Pacific/Enderbury Pacific/Fakaofo Pacific/Fiji Pacific/Funafuti Pacific/Galapagos Pacific/Gambier Pacific/Guadalcanal Pacific/Guam Pacific/Honolulu Pacific/Johnston Pacific/Kiritimati Pacific/Kosrae Pacific/Kwajalein Pacific/Majuro Pacific/Marquesas Pacific/Midway Pacific/Nauru Pacific/Niue Pacific/Norfolk Pacific/Noumea Pacific/Pago_Pago Pacific/Palau Pacific/Pitcairn Pacific/Pohnpei Pacific/Port_Moresby Pacific/Rarotonga Pacific/Saipan Pacific/Tahiti Pacific/Tarawa Pacific/Tongatapu Pacific/Wake Pacific/Wallis US/Alaska US/Arizona US/Central US/Eastern US/Hawaii US/Mountain US/Pacific UTC  "
},
{
	"uri": "https://docs.siridb.net/database/status_information/",
	"title": "status information",
	"tags": [],
	"description": "",
	"content": "Syntax:\nshow [\u0026lt;option\u0026gt; [,\u0026lt;option\u0026gt; [...]]  See available options for more info on each show command:\n show active_handles: Returns the active handles which can be used as an indicator for how busy a server is. show active_tasks: Returns the active tasks for the current database. show buffer_path: Returns the local buffer path on this server. show buffer_size: Returns the buffer size in bytes on this server. show dbname: Returns the database name. show dbpath: Returns the local database path on this server. show drop_threshold: Returns the current drop threshold (value between 0 and 1 representing a percentage). show duration_log: Returns the sharding duration for log data on this database (not supported yet). show duration_num: Returns the sharding duration for num data on this database. show fifo_files: Returns the number of fifo files which are used to update the replica server. This value is 0 if the server has no replica. A value greater than 1 could be an indication that replication is not working. show idle_percentage: Returns percentage of idle time since the database was loaded. show idle_time: Returns the idle time in seconds since the database was loaded. show ip_support: Returns the ip support setting on this server. show libuv: Returns the version of libuv on this server. show list_limit: Returns the maximum value which can be used as limit in a list query. show log_level: Returns the current log level for this server. show max_open_files: Returns the maximum open files value used for sharding on this server (if this value is lower than expected, please check the log files for SiriDB as startup time). show mem_usage: Returns the current memory usage in MB\u0026rsquo;s on this server. show open_files: Returns the number of open files on this server for the selected database (should be 0 when the server is in backup_mode). show pool: Returns the pool ID for this server. show received_points: Returns the number of received points for this server. On each restart of the SiriDB Server the counter will reset to 0. This value is only incremented when this server is receiving points from a client. show reindex_progress: Returns the re-index status on this server. Only available when the database is re-indexing series over pools. show selected_points: Returns the selected points for this server. On each restart of the SiriDB Server the counter will reset to 0. This value includes all points which are read from the local shards and the points received from other servers to respond to a select query. The value is only incremented when this server received the select query from a client. show select_points_limit: Returns the maximum number of points which can be returned with a select query. show server: Returns this server name. The name has format host:port show startup_time: Returns the time in seconds it took to startup the SiriDB database on this server. show status: Returns the current status for this server. show sync_progress: Return synchronization status while creating a new replica server on this server. show time_precision: Returns the time precision for this database. show timezone: Returns the timezone for this database. show uptime: Returns the uptime in seconds this server is running. show uuid: Returns the UUID (unique ID) for this server. show version: Returns the SiriDB version running on this server. show who_am_i: Returns the user who is running this request.  examples # show the database name and time precision show dbname, time_precision # sample output { \u0026quot;data\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;dbname\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;mydb\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;time_precision\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;s\u0026quot; } ] }  "
},
{
	"uri": "https://docs.siridb.net/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "SiriDB Transceptor Technology, a Dutch software startup, is proud to announce SiriDB to the world. This TSDB is created to analyze and aggregate time series data from any source, from IoT to financial transactions to any other metric data stream. SiriDB is a fully open sourced time series database written in native C. Optimized to grow with your insert and query needs, SiriDB gives you the control over endless time series data. Time series data occurs wherever the same measurements are recorded on a regular basis. Common examples are temperature, rainfall, cpu usage, stock prices, and even sun spots.\nMain features Robust - SiriDB\u0026rsquo;s clustering mechanism provides the possibility to update and maintain the database while remaining online.\nScalable - SiriDB is scalable by using a unique pool mechanism that allows pools to be added on the fly when needed. When a pool is added data is automatically divided evenly over all available pools providing optimal usage of all available computing resources.\nFast - SiriDB uses an unique algorithm to store its time series data without using bulky indexes. This algorithm allows the custom query language to distribute queries over all pools making data retrieval incredibly fast.\nSiriDB with a multiple nodes clustering function is available as open source under the MIT license. It gives you the opportunity to analyze data by revealing trends, patterns, cycles, anomalies and outliers that will make an organization much more responsive and efficient.\nGet it now Source code is available here at GitHub.\n"
},
{
	"uri": "https://docs.siridb.net/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.siridb.net/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]